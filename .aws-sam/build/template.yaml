AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Personal Board - A tool for managing your personal board of directors

  '
Parameters:
  DomainName:
    Type: String
    Default: board.seibtribe.us
    Description: The domain name for the website
  HostedZoneId:
    Type: String
    Description: The Route 53 hosted zone ID for the domain
  Environment:
    Type: String
    Default: production
    AllowedValues:
    - development
    - production
    Description: The deployment environment
  StackName:
    Type: String
    Default: personal-board
    Description: The name of the stack
Resources:
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: ${StackName}-api
      Description: API for Personal Board AI guidance
      EndpointConfiguration:
        Types:
        - EDGE
      BinaryMediaTypes:
      - '*/*'
      Tags:
      - Key: Project
        Value: PersonalBoard
      - Key: Environment
        Value:
          Ref: Environment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - AIGuidanceMethod
    - AIGuidanceOptionsMethod
    Properties:
      RestApiId:
        Ref: RestApi
      StageName:
        Ref: Environment
      StageDescription:
        Description:
          Fn::Sub: Personal Board API - ${Environment}
        Variables:
          environment:
            Ref: Environment
  AIGuidanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${StackName}-ai-guidance
      CodeUri: AIGuidanceFunction
      Handler: ai-guidance.handler
      Runtime: nodejs18.x
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          NODE_ENV:
            Ref: Environment
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - bedrock:InvokeModel
          - bedrock:InvokeModelWithResponseStream
          Resource:
          - Fn::Sub: arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/us.anthropic.claude-3-5-sonnet-20241022-v2:0
          - Fn::Sub: arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/us.anthropic.claude-3-5-haiku-20241022-v1:0
          - arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0
          - arn:aws:bedrock:us-east-2::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0
          - arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0
          - arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-5-haiku-20241022-v1:0
          - arn:aws:bedrock:us-east-2::foundation-model/anthropic.claude-3-5-haiku-20241022-v1:0
          - arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-5-haiku-20241022-v1:0
      Tags:
        Environment:
          Ref: Environment
        StackName:
          Ref: StackName
    Metadata:
      SamResourceId: AIGuidanceFunction
  AIGuidanceLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: AIGuidanceFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  AIGuidanceResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: ai-guidance
  AIGuidanceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: AIGuidanceResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AIGuidanceFunction.Arn}/invocations
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Headers: true
  AIGuidanceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: AIGuidanceResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
        ResponseModels:
          application/json: Empty
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${DomainName}-${Environment}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
      - Key: Project
        Value: PersonalBoard
      - Key: Environment
        Value:
          Ref: Environment
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name:
          Fn::Sub: ${DomainName}-oac
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Ref: DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
      - DomainName:
          Ref: DomainName
        HostedZoneId:
          Ref: HostedZoneId
      Tags:
      - Key: Project
        Value: PersonalBoard
      - Key: Environment
        Value:
          Ref: Environment
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - Id: S3Origin
          DomainName:
            Fn::GetAtt:
            - WebsiteBucket
            - RegionalDomainName
          S3OriginConfig:
            OriginAccessIdentity: ''
          OriginAccessControlId:
            Fn::GetAtt:
            - OriginAccessControl
            - Id
        Enabled: true
        HttpVersion: http2and3
        DefaultRootObject: index.html
        Aliases:
        - Ref: DomainName
        DefaultCacheBehavior:
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          TargetOriginId: S3Origin
          SmoothStreaming: false
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn:
            Ref: SSLCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        CustomErrorResponses:
        - ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: /index.html
        - ErrorCode: 403
          ResponseCode: 200
          ResponsePagePath: /index.html
        Comment:
          Fn::Sub: Personal Board - ${Environment}
      Tags:
      - Key: Project
        Value: PersonalBoard
      - Key: Environment
        Value:
          Ref: Environment
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Ref: DomainName
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - CloudFrontDistribution
          - DomainName
        HostedZoneId: Z2FDTNDATAQYW2
Outputs:
  WebsiteURL:
    Description: URL for the website
    Value:
      Fn::Sub: https://${DomainName}
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-WebsiteURL
  BucketName:
    Description: Name of the S3 bucket
    Value:
      Ref: WebsiteBucket
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-BucketName
  DistributionId:
    Description: CloudFront Distribution ID
    Value:
      Ref: CloudFrontDistribution
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DistributionId
  DistributionDomainName:
    Description: CloudFront Distribution Domain Name
    Value:
      Fn::GetAtt:
      - CloudFrontDistribution
      - DomainName
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DistributionDomainName
  AIGuidanceApiUrl:
    Description: URL for the AI Guidance API
    Value:
      Fn::Sub: https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AIGuidanceApiUrl
  AIGuidanceFunctionArn:
    Description: ARN of the AI Guidance Lambda function
    Value:
      Fn::GetAtt:
      - AIGuidanceFunction
      - Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AIGuidanceFunctionArn
