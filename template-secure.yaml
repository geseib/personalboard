AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Personal Board - A tool for managing your personal board of directors (SECURE VERSION)

Parameters:
  DomainName:
    Type: String
    Default: board.seibtribe.us
    Description: The domain name for the website
  
  HostedZoneId:
    Type: String
    Description: The Route 53 hosted zone ID for the domain
    
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - development
      - production
    Description: The deployment environment

  StackName:
    Type: String
    Default: personal-board
    Description: The name of the stack

Resources:
  # API Gateway for AI endpoints with CloudFront custom header security
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${StackName}-api'
      Description: API for Personal Board AI guidance
      EndpointConfiguration:
        Types:
          - EDGE
      BinaryMediaTypes:
        - '*/*'
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 'execute-api:Invoke'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
      Tags:
        - Key: Project
          Value: PersonalBoard
        - Key: Environment
          Value: !Ref Environment

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - AIGuidanceMethod
      - AIGuidanceOptionsMethod
    Properties:
      RestApiId: !Ref RestApi
      StageName: !Ref Environment
      StageDescription:
        Description: !Sub 'Personal Board API - ${Environment}'
        Variables:
          environment: !Ref Environment

  # Custom header secret for CloudFront-to-API authentication
  ApiSecretHeader:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${StackName}-api-header-secret'
      Description: Secret header value for CloudFront to API Gateway authentication
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: 'header-value'
        PasswordLength: 32
        ExcludeCharacters: '"@/\'

  # AI Guidance Lambda Function with enhanced security
  AIGuidanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${StackName}-ai-guidance'
      CodeUri: lambda-functions/ai-guidance/
      Handler: ai-guidance.handler
      Runtime: nodejs18.x
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          ALLOWED_ORIGIN: !Sub 'https://${DomainName}'
          SECRET_HEADER_NAME: 'X-CloudFront-Secret'
          SECRET_HEADER_VALUE: !Sub '{{resolve:secretsmanager:${ApiSecretHeader}:SecretString:header-value}}'
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:InvokeModelWithResponseStream
              Resource:
                - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/us.anthropic.claude-3-5-sonnet-20241022-v2:0'
                - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/us.anthropic.claude-3-5-haiku-20241022-v1:0'
                - 'arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0'
                - 'arn:aws:bedrock:us-east-2::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0'
                - 'arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0'
                - 'arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-5-haiku-20241022-v1:0'
                - 'arn:aws:bedrock:us-east-2::foundation-model/anthropic.claude-3-5-haiku-20241022-v1:0'
                - 'arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-5-haiku-20241022-v1:0'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref ApiSecretHeader
      Tags:
        Environment: !Ref Environment
        StackName: !Ref StackName

  # Lambda permission for API Gateway
  AIGuidanceLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AIGuidanceFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*'

  # API Gateway Resources and Methods
  AIGuidanceResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: 'ai-guidance'

  AIGuidanceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref AIGuidanceResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AIGuidanceFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  # CORS Options Method - restricted to your domain
  AIGuidanceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref AIGuidanceResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-CloudFront-Secret'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'https://${DomainName}'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'

  # S3 Bucket for website content
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${DomainName}-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Project
          Value: PersonalBoard
        - Key: Environment
          Value: !Ref Environment

  # Origin Access Control for CloudFront
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${DomainName}-oac'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # SSL Certificate
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      Tags:
        - Key: Project
          Value: PersonalBoard
        - Key: Environment
          Value: !Ref Environment

  # CloudFront Distribution with API integration
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
          - Id: APIOrigin
            DomainName: !Sub '${RestApi}.execute-api.${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
            OriginCustomHeaders:
              - HeaderName: X-CloudFront-Secret
                HeaderValue: !Sub '{{resolve:secretsmanager:${ApiSecretHeader}:SecretString:header-value}}'
        Enabled: true
        HttpVersion: http2and3
        DefaultRootObject: index.html
        Aliases:
          - !Ref DomainName
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: S3Origin
          SmoothStreaming: false
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03  # Managed-SecurityHeadersPolicy
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # Managed-CORS-S3Origin
        CacheBehaviors:
          - PathPattern: '*/ai-guidance*'
            TargetOriginId: APIOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # Managed-CachingDisabled
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac  # Managed-AllViewerExceptHostHeader
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        Comment: !Sub 'Personal Board - ${Environment}'
      Tags:
        - Key: Project
          Value: PersonalBoard
        - Key: Environment
          Value: !Ref Environment

  # Route 53 DNS record
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID

  # WAF for rate limiting and additional security
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub '${StackName}-waf'
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      Rules:
        - Name: RateLimitRule
          Priority: 1
          Statement:
            RateBasedStatement:
              Limit: 100  # 100 requests per 5 minutes per IP
              AggregateKeyType: IP
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RateLimitRule
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${StackName}-waf'
      Tags:
        - Key: Project
          Value: PersonalBoard
        - Key: Environment
          Value: !Ref Environment

  # Associate WAF with CloudFront
  WebACLAssociation:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        WebACLId: !GetAtt WebACL.Arn

Outputs:
  WebsiteURL:
    Description: URL for the website
    Value: !Sub 'https://${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'
  
  BucketName:
    Description: Name of the S3 bucket
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'
  
  DistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-DistributionId'
  
  DistributionDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-DistributionDomainName'

  AIGuidanceApiUrl:
    Description: URL for the AI Guidance API (via CloudFront)
    Value: !Sub 'https://${DomainName}/production/ai-guidance'
    Export:
      Name: !Sub '${AWS::StackName}-AIGuidanceApiUrl'
  
  AIGuidanceFunctionArn:
    Description: ARN of the AI Guidance Lambda function
    Value: !GetAtt AIGuidanceFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AIGuidanceFunctionArn'
  
  SecretHeaderArn:
    Description: ARN of the secret header for API authentication
    Value: !Ref ApiSecretHeader
    Export:
      Name: !Sub '${AWS::StackName}-SecretHeaderArn'